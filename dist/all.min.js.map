{"version":3,"sources":["all.min.js","cn-datetimepicker.js"],"names":["cnDatetimepicker","Link","$scope","elem","attrs","ctrl","formatModel","val","console","log","date","moment","modelType","format","modelFormat","toDate","formatView","formatString","parseView","m","update","find","iconClass","modelFormatter","viewFormatter","viewParser","placeholder","inputConfig","$watch","newVal","prevVal","onChange","$value","$setValidity","required","ngModel","angular","equals","$setDirty","restrict","require","template","scope","minDate","maxView","minView","isDisabled","inputId","modelParser","compile","pre","cnDatetimeConfig","$formatters","unshift","config","$parsers","priority","link","datetimepicker","defaultConfig","validateConfiguration","configuration","validOptions","prop","hasOwnProperty","indexOf","validViews","startView","isNumber","minuteStep","dropdownSelector","isString","weekStart","onSetTime","datetimepickerConfig","replace","element","showView","view","noop","directiveConfig","$eval","extend","dataFactory","year","unixDate","selectedDate","startOf","startDecade","parseInt","startDate","activeYear","result","currentView","nextView","title","leftDate","subtract","valueOf","rightDate","add","dates","setUnits","i","yearMoment","dateValue","display","past","future","active","disabled","push","month","activeDate","previousView","currentDate","monthMoment","isBefore","day","startOfMonth","endOfMonth","endOf","Math","abs","weekday","dayNames","weeks","dayNumber","week","j","isAfter","hour","minute","second","activeFormat","hourMoment","limit","setTime","keepDropdown","tempDate","Date","newDate","getTime","jQuery","dropdown","isFunction","$setViewValue","data","getUTCTime","changeView","viewName","event","invalid","stopPropagation","preventDefault","Infinity","curDate","_","each","unit","setVal","setDate","cur","prev","module","constant","directive","$inject"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  'use strict';\n  /*globals angular, moment, jQuery */\n  /*jslint vars:true */\n\n  /**\n   * @license angular-bootstrap-datetimepicker  v0.2.4\n   * (c) 2013 Knight Rider Consulting, Inc. http://www.knightrider.com\n   * License: MIT\n   */\n\n  /**\n   *\n   *    @author       dzuch, Dale \"Ducky\" Lotts\n   *    @since        2013-Jul-8\n   */\n\n  angular.module('ui.bootstrap.datetimepicker', []).constant('dateTimePickerConfig', {\n    dropdownSelector: null,\n    minuteStep: 5,\n    maxView: 'year',\n    minView: 'minute',\n    startView: 'day',\n    weekStart: 0\n  }).directive('cnDatetimepicker', cnDatetimepicker).directive('cnDatetimeConfig', cnDatetimeConfig).directive('datetimepicker', datetimepicker);\n\n  // Order of the elements in the validViews array is significant.\n  var validViews = ['minute', 'hour', 'day', 'month', 'year'];\n\n  function cnDatetimepicker() {\n    return {\n      restrict: 'E',\n      require: 'ngModel',\n      template: '\\n          <div dropdown class=\"dropdown\">\\n            <div class=\"input-group\" data-target=\"#\" id=\"{{inputId}}-container\"\\n                 dropdown-toggle ng-disabled=\"{{isDisabled}}\">\\n              <input type=\"text\"\\n                     class=\"form-control\"\\n                     id=\"{{inputId}}\"\\n                     name=\"{{inputId}}\"\\n                     ng-model=\"ngModel\"\\n                     cn-datetime-config=\"inputConfig\"\\n                     ng-disabled=\"isDisabled\"\\n                     ng-required=\"required\"\\n                     placeholder=\"{{placeholder}}\">\\n              <span class=\"input-group-btn\">\\n                <button class=\"btn\" ng-disabled=\"isDisabled\">\\n                  <i class=\"{{iconClass}}\"></i>\\n                </button>\\n              </span>\\n            </div>\\n            <ul class=\"dropdown-menu cn-datetimepicker-dropdown\" role=\"menu\">\\n              <li>\\n                <datetimepicker\\n                  ng-model=\"ngModel\"\\n                  min-date=\"minDate\"\\n                  model-formatter=\"modelFormatter\"\\n                  model-parser=\"modelParser\"\\n                  datetimepicker-config=\"{ dropdownSelector: \\'#\\' + inputId + \\'-container\\', minView: minView || \\'minute\\', maxView: maxView || \\'year\\' }\">\\n                </datetimepicker>\\n              </li>\\n            </ul>\\n          </div>',\n      scope: {\n        ngModel: '=',\n        minDate: '=',\n        maxView: '@',\n        minView: '@',\n        isDisabled: '=',\n        inputId: '@',\n        formatString: '@',\n        modelType: '@',\n        //modelFormat: '@',\n        modelFormatter: '=?',\n        modelParser: '=?',\n        viewFormatter: '=?',\n        viewParser: '=?',\n        required: '=cnDateRequired',\n        onChange: '&'\n      },\n      compile: function compile() {\n        return { pre: Link };\n      }\n      //link: Link\n    };\n\n    function Link($scope, elem, attrs, ctrl) {\n\n      var input = elem.find('input');\n\n      //$scope.required = attrs.required;\n      $scope.iconClass = attrs.iconClass || 'fa fa-calendar';\n      $scope.modelFormat = 'YYYY-MM-DD HH:mm:ss';\n      $scope.modelFormatter = $scope.modelFormatter || formatModel;\n      $scope.viewFormatter = $scope.viewFormatter || formatView;\n      $scope.viewParser = $scope.viewParser || parseView;\n      $scope.placeholder = attrs.placeholder;\n\n      $scope.inputConfig = {\n        viewFormatter: $scope.viewFormatter,\n        viewParser: $scope.viewParser\n      };\n\n      //////////\n\n      $scope.$watch('ngModel', function (newVal, prevVal) {\n        if ($scope.onChange) {\n          $scope.onChange({ $value: newVal });\n        }\n        ctrl.$setValidity('schemaForm', true);\n        if ($scope.required) {\n          ctrl.$setValidity('tv4-302', !!($scope.ngModel || $scope.ngModel === 0));\n        }\n        if (!angular.equals(newVal, prevVal)) {\n          ctrl.$setDirty();\n        }\n      });\n\n      function formatModel(val) {\n        console.log('parsing:', val);\n        if (!val) return val;\n\n        var date = moment(val);\n        return $scope.modelType === 'string' ? date.format($scope.modelFormat) : date.toDate();\n      }\n\n      function formatView(val) {\n        if (!val) return val;\n\n        return moment(val).format($scope.formatString || 'M/DD/YYYY h:mm a');\n      }\n\n      function parseView(val) {\n        if (!val) return;\n\n        var m = moment(val, $scope.formatString || 'M/DD/YYYY h:mm a');\n        var update = $scope.modelType === 'string' ? m.format($scope.modelFormat) : m.toDate();\n\n        console.log('parseView:', val, update);\n\n        return update;\n      }\n    }\n  }\n\n  function cnDatetimeConfig() {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      priority: 9000,\n      scope: {\n        config: '=cnDatetimeConfig'\n      },\n      link: Link\n    };\n\n    function Link($scope, elem, attrs, ctrl) {\n      ctrl.$formatters.unshift($scope.config.viewFormatter);\n      ctrl.$parsers.unshift($scope.config.viewParser);\n    }\n  }\n\n  datetimepicker.$inject = ['dateTimePickerConfig'];\n  function datetimepicker(defaultConfig) {\n\n    var validateConfiguration = function validateConfiguration(configuration) {\n      var validOptions = ['startView', 'maxView', 'minView', 'minuteStep', 'dropdownSelector', 'weekStart'];\n\n      for (var prop in configuration) {\n        if (configuration.hasOwnProperty(prop)) {\n          if (validOptions.indexOf(prop) < 0) {\n            throw \"invalid option: \" + prop;\n          }\n        }\n      }\n\n      if (configuration.maxView && validViews.indexOf(configuration.maxView) < validViews.indexOf(configuration.startView)) {\n        configuration.startView = configuration.maxView;\n      }\n\n      if (validViews.indexOf(configuration.startView) < 0) {\n        throw \"invalid startView value: \" + configuration.startView;\n      }\n\n      if (validViews.indexOf(configuration.minView) < 0) {\n        throw \"invalid minView value: \" + configuration.minView;\n      }\n\n      if (validViews.indexOf(configuration.minView) > validViews.indexOf(configuration.startView)) {\n        throw \"startView must be greater than minView\";\n      }\n\n      if (!angular.isNumber(configuration.minuteStep)) {\n        throw \"minuteStep must be numeric\";\n      }\n      if (configuration.minuteStep <= 0 || configuration.minuteStep >= 60) {\n        throw \"minuteStep must be greater than zero and less than 60\";\n      }\n      if (configuration.dropdownSelector !== null && !angular.isString(configuration.dropdownSelector)) {\n        throw \"dropdownSelector must be a string\";\n      }\n\n      if (!angular.isNumber(configuration.weekStart)) {\n        throw \"weekStart must be numeric\";\n      }\n      if (configuration.weekStart < 0 || configuration.weekStart > 6) {\n        throw \"weekStart must be greater than or equal to zero and less than 7\";\n      }\n    };\n\n    return {\n      restrict: 'E',\n      require: 'ngModel',\n      template: '\\n      <div class=\\'datetimepicker\\'>\\n        <table class=\\'table table-condensed\\'>\\n          <thead>\\n          <tr>\\n            <th class=\\'left\\'\\n                data-ng-click=\\'changeView(data.currentView, data.leftDate, $event)\\'>\\n              <i class=\\'glyphicon glyphicon-arrow-left\\'/>\\n            </th>\\n            <th class=\\'switch\\'\\n                ng-class=\"{\\'disabled\\': !showView(data.previousView)}\"\\n                colspan=\\'5\\'\\n                data-ng-click=\\'changeView(data.previousView, data.currentDate, $event, !showView(data.previousView))\\'>\\n                {{ data.title }}\\n            </th>\\n            <th class=\\'right\\'\\n                data-ng-click=\\'changeView(data.currentView, data.rightDate, $event)\\'>\\n              <i class=\\'glyphicon glyphicon-arrow-right\\'/>\\n            </th>\\n          </tr>\\n          <tr>\\n            <th class=\\'dow\\' data-ng-repeat=\\'day in data.dayNames\\'>{{ day }}</th>\\n          </tr>\\n          </thead>\\n          <tbody>\\n          <tr data-ng-class=\"{ hide: data.currentView == \\'day\\' }\">\\n            <td colspan=\\'7\\' >\\n              <span class=\\'{{ data.currentView }}\\'\\n                    data-ng-repeat=\\'dateValue in data.dates\\'\\n                    data-ng-class=\\'{active: dateValue.active, past: dateValue.past, future: dateValue.future, disabled: dateValue.disabled}\\'\\n                    data-ng-click=\"changeView(data.nextView, dateValue.date, $event, dateValue.disabled, true)\">\\n                {{ dateValue.display }}\\n              </span>\\n            </td>\\n          </tr>\\n          <tr data-ng-show=\\'data.currentView == \"day\"\\' data-ng-repeat=\\'week in data.weeks\\'>\\n            <td data-ng-repeat=\\'dateValue in week.dates\\'\\n                data-ng-click=\\'changeView(data.nextView, dateValue.date, $event, dateValue.disabled, true)\\'\\n                class=\\'day\\'\\n                data-ng-class=\\'{active: dateValue.active, past: dateValue.past, future: dateValue.future, disabled: dateValue.disabled}\\'>\\n              {{ dateValue.display }}\\n            </td>\\n          </tr>\\n          </tbody>\\n        </table>\\n      </div>',\n      scope: {\n        ngModel: \"=\",\n        onSetTime: \"=\",\n        minDate: '=',\n        modelFormatter: '=?',\n        modelParser: '=?',\n        datetimepickerConfig: \"=?\"\n      },\n      replace: true,\n      link: function link(scope, element, attrs, ctrl) {\n\n        var noop = function noop(val) {\n          return val;\n        };\n\n        scope.modelFormatter = scope.modelFormatter || noop;\n        scope.modelParser = scope.modelParser || noop;\n        scope.showView = showView;\n\n        var directiveConfig = {};\n\n        if (scope.datetimepickerConfig) {\n          directiveConfig = scope.datetimepickerConfig;\n        } else if (attrs.datetimepickerConfig) {\n          directiveConfig = scope.$eval(attrs.datetimepickerConfig);\n        }\n\n        var configuration = {};\n\n        angular.extend(configuration, defaultConfig, directiveConfig);\n\n        validateConfiguration(configuration);\n\n        var dataFactory = {\n          year: function year(unixDate) {\n            var selectedDate = moment(unixDate).startOf('year');\n            // View starts one year before the decade starts and ends one year after the decade ends\n            // i.e. passing in a date of 1/1/2013 will give a range of 2009 to 2020\n            // Truncate the last digit from the current year and subtract 1 to get the start of the decade\n            var startDecade = parseInt(selectedDate.year() / 10, 10) * 10;\n            var startDate = moment(selectedDate).year(startDecade - 1).startOf('year');\n            var activeYear = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).year() : 0;\n\n            var result = {\n              'currentView': 'year',\n              'nextView': configuration.minView === 'year' ? 'setTime' : 'month',\n              'title': startDecade + '-' + (startDecade + 9),\n              'leftDate': moment(startDate).subtract(9, 'year').valueOf(),\n              'rightDate': moment(startDate).add(11, 'year').valueOf(),\n              'dates': [],\n              'setUnits': ['year']\n            };\n\n            for (var i = 0; i < 12; i++) {\n              var yearMoment = moment(startDate).add(i, 'years');\n              var dateValue = {\n                'date': yearMoment.valueOf(),\n                'display': yearMoment.format('YYYY'),\n                'past': yearMoment.year() < startDecade,\n                'future': yearMoment.year() > startDecade + 9,\n                'active': yearMoment.year() === activeYear,\n                'disabled': scope.minDate && yearMoment.year() < moment(scope.minDate).year()\n              };\n\n              result.dates.push(dateValue);\n            }\n\n            return result;\n          },\n\n          month: function month(unixDate) {\n\n            var startDate = moment(unixDate).startOf('year');\n\n            var activeDate = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).format('YYYY-MMM') : 0;\n\n            var result = {\n              'previousView': 'year',\n              'currentView': 'month',\n              'nextView': configuration.minView === 'month' ? 'setTime' : 'day',\n              'currentDate': startDate.valueOf(),\n              'title': startDate.format('YYYY'),\n              'leftDate': moment(startDate).subtract(1, 'year').valueOf(),\n              'rightDate': moment(startDate).add(1, 'year').valueOf(),\n              'dates': [],\n              'setUnits': ['year', 'month']\n            };\n\n            for (var i = 0; i < 12; i++) {\n              var monthMoment = moment(startDate).add(i, 'months');\n              var dateValue = {\n                'date': monthMoment.valueOf(),\n                'display': monthMoment.format('MMM'),\n                'active': monthMoment.format('YYYY-MMM') === activeDate,\n                'disabled': scope.minDate && monthMoment.add(1, 'month').isBefore(scope.minDate)\n              };\n\n              result.dates.push(dateValue);\n            }\n\n            return result;\n          },\n\n          day: function day(unixDate) {\n\n            var selectedDate = moment(unixDate);\n            var startOfMonth = moment(selectedDate).startOf('month');\n            var endOfMonth = moment(selectedDate).endOf('month');\n\n            var startDate = moment(startOfMonth).subtract(Math.abs(startOfMonth.weekday() - configuration.weekStart), 'days');\n\n            var activeDate = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).format('YYYY-MMM-DD') : '';\n\n            var result = {\n              'previousView': 'month',\n              'currentView': 'day',\n              'nextView': configuration.minView === 'day' ? 'setTime' : 'hour',\n              'currentDate': selectedDate.valueOf(),\n              'title': selectedDate.format('MMM' + (showView('year') ? ' YYYY' : '')),\n              'leftDate': moment(startOfMonth).subtract(1, 'months').valueOf(),\n              'rightDate': moment(startOfMonth).add(1, 'months').valueOf(),\n              'dayNames': [],\n              'weeks': [],\n              'setUnits': ['year', 'month', 'date']\n            };\n\n            for (var dayNumber = configuration.weekStart; dayNumber < configuration.weekStart + 7; dayNumber++) {\n              result.dayNames.push(moment().weekday(dayNumber).format('dd'));\n            }\n\n            for (var i = 0; i < 6; i++) {\n              var week = { dates: [] };\n              for (var j = 0; j < 7; j++) {\n                var monthMoment = moment(startDate).add(i * 7 + j, 'days');\n                var dateValue = {\n                  'date': monthMoment.valueOf(),\n                  'display': monthMoment.format('D'),\n                  'active': monthMoment.format('YYYY-MMM-DD') === activeDate,\n                  'past': monthMoment.isBefore(startOfMonth),\n                  'future': monthMoment.isAfter(endOfMonth),\n                  'disabled': scope.minDate && monthMoment.add(1, 'days').isBefore(scope.minDate)\n                };\n                week.dates.push(dateValue);\n              }\n              result.weeks.push(week);\n            }\n\n            return result;\n          },\n\n          hour: function hour(unixDate) {\n            var selectedDate = moment(unixDate).hour(0).minute(0).second(0);\n\n            var activeFormat = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).format('YYYY-MM-DD H') : '';\n\n            var result = {\n              'previousView': 'day',\n              'currentView': 'hour',\n              'nextView': configuration.minView === 'hour' ? 'setTime' : 'minute',\n              'currentDate': selectedDate.valueOf(),\n              'title': showView('day') ? selectedDate.format((showView('month') ? 'MMM ' : '') + 'DD' + (showView('year') ? ' YYYY' : '')) : 'Hour',\n              'leftDate': moment(selectedDate).subtract(1, 'days').valueOf(),\n              'rightDate': moment(selectedDate).add(1, 'days').valueOf(),\n              'dates': [],\n              'setUnits': ['year', 'month', 'date', 'hour']\n            };\n\n            for (var i = 0; i < 24; i++) {\n              var hourMoment = moment(selectedDate).add(i, 'hours');\n              var dateValue = {\n                'date': hourMoment.valueOf(),\n                'display': hourMoment.format('h a'),\n                'active': hourMoment.format('YYYY-MM-DD H') === activeFormat,\n                'disabled': scope.minDate && hourMoment.add(1, 'hours').isBefore(scope.minDate)\n              };\n\n              result.dates.push(dateValue);\n            }\n\n            return result;\n          },\n\n          minute: function minute(unixDate) {\n            var selectedDate = moment(unixDate).minute(0).second(0);\n\n            var activeFormat = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).format('YYYY-MM-DD H:mm') : '';\n\n            var result = {\n              'previousView': 'hour',\n              'currentView': 'minute',\n              'nextView': 'setTime',\n              'currentDate': selectedDate.valueOf(),\n              'title': selectedDate.format('' + (showView('month') ? 'MMM ' : '') + (showView('day') ? 'DD ' : '') + (showView('year') ? ' YYYY ' : '') + 'h:mm a'),\n              'leftDate': moment(selectedDate).subtract(1, 'hours').valueOf(),\n              'rightDate': moment(selectedDate).add(1, 'hours').valueOf(),\n              'dates': [],\n              'setUnits': ['year', 'month', 'date', 'hour', 'minute']\n            };\n\n            var limit = 60 / configuration.minuteStep;\n\n            for (var i = 0; i < limit; i++) {\n              var hourMoment = moment(selectedDate).add(i * configuration.minuteStep, 'minute');\n              var dateValue = {\n                'date': hourMoment.valueOf(),\n                'display': hourMoment.format('h:mm'),\n                'active': hourMoment.format('YYYY-MM-DD H:mm') === activeFormat,\n                'disabled': scope.minDate && hourMoment.subtract(1, 'minutes').isBefore(scope.minDate)\n              };\n\n              result.dates.push(dateValue);\n            }\n\n            return result;\n          },\n\n          setTime: function setTime(unixDate, keepDropdown) {\n            var tempDate = new Date(unixDate);\n            var newDate = new Date(tempDate.getTime() /* + (tempDate.getTimezoneOffset() * 60000)*/);\n            if (configuration.dropdownSelector && !keepDropdown) {\n              jQuery(configuration.dropdownSelector).dropdown('toggle');\n            }\n            if (angular.isFunction(scope.onSetTime)) {\n              scope.onSetTime(newDate, scope.ngModel);\n            }\n            ctrl.$setViewValue(scope.modelFormatter(newDate));\n            //scope.ngModel = newDate;\n            return dataFactory[scope.data.currentView](unixDate);\n          }\n        };\n\n        var getUTCTime = function getUTCTime() {\n          console.log('getUTCTime:', scope.ngModel);\n          var tempDate = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).toDate() : new Date();\n          return tempDate.getTime() /* - (tempDate.getTimezoneOffset() * 60000)*/;\n        };\n\n        scope.changeView = function (viewName, unixDate, event, invalid, setTime) {\n          //unixDate = unixDate && _.isDate(unixDate) ? unixDate : scope.modelParser(unixDate).toDate();\n          if (event) {\n            event.stopPropagation();\n            event.preventDefault();\n          }\n\n          if (invalid) return;\n\n          if (viewName && unixDate > -Infinity && dataFactory[viewName]) {\n            if (setTime && viewName !== 'setTime') {\n              var newDate = moment(unixDate),\n                  curDate = scope.ngModel ? moment(scope.modelParser(scope.ngModel)) : moment().startOf('hour');\n\n              _.each(scope.data.setUnits, function (unit) {\n                var setVal = newDate[unit](),\n                    setDate = curDate[unit](setVal).valueOf();\n\n                //console.log('setVal, setDate:', unit, setVal, setDate);\n                dataFactory.setTime(setDate, true);\n              });\n            }\n            scope.data = dataFactory[viewName](unixDate);\n          }\n        };\n\n        scope.changeView(configuration.startView, getUTCTime());\n\n        scope.$watch('ngModel', function (cur, prev) {\n          if (cur !== prev) {\n            scope.changeView(scope.data.currentView, getUTCTime());\n          }\n        });\n\n        function showView(view) {\n          return validViews.indexOf(configuration.maxView) >= validViews.indexOf(view);\n        }\n      }\n    };\n  }\n})();","(function() {\n  'use strict';\n  /*globals angular, moment, jQuery */\n  /*jslint vars:true */\n\n  /**\n   * @license angular-bootstrap-datetimepicker  v0.2.4\n   * (c) 2013 Knight Rider Consulting, Inc. http://www.knightrider.com\n   * License: MIT\n   */\n\n  /**\n   *\n   *    @author       dzuch, Dale \"Ducky\" Lotts\n   *    @since        2013-Jul-8\n   */\n\n  angular\n      .module('ui.bootstrap.datetimepicker', [])\n      .constant('dateTimePickerConfig', {\n        dropdownSelector: null,\n        minuteStep: 5,\n        maxView: 'year',\n        minView: 'minute',\n        startView: 'day',\n        weekStart: 0\n      })\n      .directive('cnDatetimepicker', cnDatetimepicker)\n      .directive('cnDatetimeConfig', cnDatetimeConfig)\n      .directive('datetimepicker', datetimepicker);\n\n\n  // Order of the elements in the validViews array is significant.\n  const validViews = ['minute', 'hour', 'day', 'month', 'year'];\n\n  function cnDatetimepicker() {\n    return {\n      restrict: 'E',\n      require: 'ngModel',\n      template: `\n          <div dropdown class=\"dropdown\">\n            <div class=\"input-group\" data-target=\"#\" id=\"{{inputId}}-container\"\n                 dropdown-toggle ng-disabled=\"{{isDisabled}}\">\n              <input type=\"text\"\n                     class=\"form-control\"\n                     id=\"{{inputId}}\"\n                     name=\"{{inputId}}\"\n                     ng-model=\"ngModel\"\n                     cn-datetime-config=\"inputConfig\"\n                     ng-disabled=\"isDisabled\"\n                     ng-required=\"required\"\n                     placeholder=\"{{placeholder}}\">\n              <span class=\"input-group-btn\">\n                <button class=\"btn\" ng-disabled=\"isDisabled\">\n                  <i class=\"{{iconClass}}\"></i>\n                </button>\n              </span>\n            </div>\n            <ul class=\"dropdown-menu cn-datetimepicker-dropdown\" role=\"menu\">\n              <li>\n                <datetimepicker\n                  ng-model=\"ngModel\"\n                  min-date=\"minDate\"\n                  model-formatter=\"modelFormatter\"\n                  model-parser=\"modelParser\"\n                  datetimepicker-config=\"{ dropdownSelector: '#' + inputId + '-container', minView: minView || 'minute', maxView: maxView || 'year' }\">\n                </datetimepicker>\n              </li>\n            </ul>\n          </div>`,\n      scope: {\n        ngModel: '=',\n        minDate: '=',\n        maxView: '@',\n        minView: '@',\n        isDisabled: '=',\n        inputId: '@',\n        formatString: '@',\n        modelType: '@',\n        //modelFormat: '@',\n        modelFormatter: '=?',\n        modelParser: '=?',\n        viewFormatter: '=?',\n        viewParser: '=?',\n        required: '=cnDateRequired',\n        onChange: '&'\n      },\n      compile: () => ({pre: Link})\n      //link: Link\n    };\n\n    function Link($scope, elem, attrs, ctrl) {\n\n      let input = elem.find('input');\n\n      //$scope.required = attrs.required;\n      $scope.iconClass = attrs.iconClass || 'fa fa-calendar';\n      $scope.modelFormat = 'YYYY-MM-DD HH:mm:ss';\n      $scope.modelFormatter = $scope.modelFormatter || formatModel;\n      $scope.viewFormatter = $scope.viewFormatter || formatView;\n      $scope.viewParser = $scope.viewParser || parseView;\n      $scope.placeholder = attrs.placeholder;\n\n      $scope.inputConfig = {\n        viewFormatter: $scope.viewFormatter,\n        viewParser: $scope.viewParser\n      };\n\n      //////////\n\n      $scope.$watch('ngModel', function(newVal, prevVal) {\n        if($scope.onChange) {\n          $scope.onChange({$value: newVal});\n        }\n        ctrl.$setValidity('schemaForm', true);\n        if($scope.required) {\n          ctrl.$setValidity('tv4-302', !!($scope.ngModel || $scope.ngModel === 0));\n        }\n        if(!angular.equals(newVal, prevVal)) {\n          ctrl.$setDirty();\n        }\n      });\n\n      function formatModel(val) {\n        console.log('parsing:', val);\n        if(!val) return val;\n\n        let date = moment(val);\n        return $scope.modelType === 'string' ? date.format($scope.modelFormat) : date.toDate();\n      }\n\n      function formatView(val) {\n        if(!val) return val;\n\n        return moment(val).format($scope.formatString || 'M/DD/YYYY h:mm a');\n      }\n\n      function parseView(val) {\n        if(!val) return;\n\n        let m = moment(val, $scope.formatString || 'M/DD/YYYY h:mm a');\n        let update = $scope.modelType === 'string' ? m.format($scope.modelFormat) : m.toDate();\n\n        console.log('parseView:', val, update);\n\n        return update;\n      }\n    }\n  }\n\n  function cnDatetimeConfig() {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      priority: 9000,\n      scope: {\n        config: '=cnDatetimeConfig'\n      },\n      link: Link\n    };\n\n    function Link($scope, elem, attrs, ctrl) {\n      ctrl.$formatters.unshift($scope.config.viewFormatter);\n      ctrl.$parsers.unshift($scope.config.viewParser);\n    }\n  }\n\n  datetimepicker.$inject = ['dateTimePickerConfig'];\n  function datetimepicker(defaultConfig) {\n\n    var validateConfiguration = function(configuration) {\n      var validOptions = [\n        'startView', 'maxView', 'minView', 'minuteStep', 'dropdownSelector', 'weekStart'\n      ];\n\n      for(var prop in configuration) {\n        if(configuration.hasOwnProperty(prop)) {\n          if(validOptions.indexOf(prop) < 0) {\n            throw (\"invalid option: \" + prop);\n          }\n        }\n      }\n\n      if(configuration.maxView && validViews.indexOf(configuration.maxView) < validViews.indexOf(configuration.startView)) {\n        configuration.startView = configuration.maxView;\n      }\n\n      if(validViews.indexOf(configuration.startView) < 0) {\n        throw (\"invalid startView value: \" + configuration.startView);\n      }\n\n      if(validViews.indexOf(configuration.minView) < 0) {\n        throw (\"invalid minView value: \" + configuration.minView);\n      }\n\n      if(validViews.indexOf(configuration.minView) > validViews.indexOf(configuration.startView)) {\n        throw (\"startView must be greater than minView\");\n      }\n\n      if(!angular.isNumber(configuration.minuteStep)) {\n        throw (\"minuteStep must be numeric\");\n      }\n      if(configuration.minuteStep <= 0 || configuration.minuteStep >= 60) {\n        throw (\"minuteStep must be greater than zero and less than 60\");\n      }\n      if(configuration.dropdownSelector !== null && !angular.isString(configuration.dropdownSelector)) {\n        throw (\"dropdownSelector must be a string\");\n      }\n\n      if(!angular.isNumber(configuration.weekStart)) {\n        throw (\"weekStart must be numeric\");\n      }\n      if(configuration.weekStart < 0 || configuration.weekStart > 6) {\n        throw (\"weekStart must be greater than or equal to zero and less than 7\");\n      }\n    };\n\n    return {\n      restrict: 'E',\n      require: 'ngModel',\n      template: `\n      <div class='datetimepicker'>\n        <table class='table table-condensed'>\n          <thead>\n          <tr>\n            <th class='left'\n                data-ng-click='changeView(data.currentView, data.leftDate, $event)'>\n              <i class='glyphicon glyphicon-arrow-left'/>\n            </th>\n            <th class='switch'\n                ng-class=\"{'disabled': !showView(data.previousView)}\"\n                colspan='5'\n                data-ng-click='changeView(data.previousView, data.currentDate, $event, !showView(data.previousView))'>\n                {{ data.title }}\n            </th>\n            <th class='right'\n                data-ng-click='changeView(data.currentView, data.rightDate, $event)'>\n              <i class='glyphicon glyphicon-arrow-right'/>\n            </th>\n          </tr>\n          <tr>\n            <th class='dow' data-ng-repeat='day in data.dayNames'>{{ day }}</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr data-ng-class=\"{ hide: data.currentView == 'day' }\">\n            <td colspan='7' >\n              <span class='{{ data.currentView }}'\n                    data-ng-repeat='dateValue in data.dates'\n                    data-ng-class='{active: dateValue.active, past: dateValue.past, future: dateValue.future, disabled: dateValue.disabled}'\n                    data-ng-click=\"changeView(data.nextView, dateValue.date, $event, dateValue.disabled, true)\">\n                {{ dateValue.display }}\n              </span>\n            </td>\n          </tr>\n          <tr data-ng-show='data.currentView == \"day\"' data-ng-repeat='week in data.weeks'>\n            <td data-ng-repeat='dateValue in week.dates'\n                data-ng-click='changeView(data.nextView, dateValue.date, $event, dateValue.disabled, true)'\n                class='day'\n                data-ng-class='{active: dateValue.active, past: dateValue.past, future: dateValue.future, disabled: dateValue.disabled}'>\n              {{ dateValue.display }}\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </div>`,\n      scope: {\n        ngModel: \"=\",\n        onSetTime: \"=\",\n        minDate: '=',\n        modelFormatter: '=?',\n        modelParser: '=?',\n        datetimepickerConfig: \"=?\"\n      },\n      replace: true,\n      link: function(scope, element, attrs, ctrl) {\n\n        var noop = val => val;\n\n        scope.modelFormatter = scope.modelFormatter || noop;\n        scope.modelParser = scope.modelParser || noop;\n        scope.showView = showView;\n\n        var directiveConfig = {};\n\n        if(scope.datetimepickerConfig) {\n          directiveConfig = scope.datetimepickerConfig;\n        }\n        else if(attrs.datetimepickerConfig) {\n          directiveConfig = scope.$eval(attrs.datetimepickerConfig);\n        }\n\n        var configuration = {};\n\n        angular.extend(configuration, defaultConfig, directiveConfig);\n\n        validateConfiguration(configuration);\n\n        var dataFactory = {\n          year: function(unixDate) {\n            var selectedDate = moment(unixDate).startOf('year');\n            // View starts one year before the decade starts and ends one year after the decade ends\n            // i.e. passing in a date of 1/1/2013 will give a range of 2009 to 2020\n            // Truncate the last digit from the current year and subtract 1 to get the start of the decade\n            var startDecade = (parseInt(selectedDate.year() / 10, 10) * 10);\n            var startDate = moment(selectedDate).year(startDecade - 1).startOf('year');\n            var activeYear = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).year() : 0;\n\n            var result = {\n              'currentView': 'year',\n              'nextView': configuration.minView === 'year' ? 'setTime' : 'month',\n              'title': startDecade + '-' + (startDecade + 9),\n              'leftDate': moment(startDate).subtract(9, 'year').valueOf(),\n              'rightDate': moment(startDate).add(11, 'year').valueOf(),\n              'dates': [],\n              'setUnits': ['year']\n            };\n\n            for(var i = 0; i < 12; i++) {\n              var yearMoment = moment(startDate).add(i, 'years');\n              var dateValue = {\n                'date': yearMoment.valueOf(),\n                'display': yearMoment.format('YYYY'),\n                'past': yearMoment.year() < startDecade,\n                'future': yearMoment.year() > startDecade + 9,\n                'active': yearMoment.year() === activeYear,\n                'disabled': scope.minDate && yearMoment.year() < moment(scope.minDate).year()\n              };\n\n              result.dates.push(dateValue);\n            }\n\n            return result;\n          },\n\n          month: function(unixDate) {\n\n            var startDate = moment(unixDate).startOf('year');\n\n            var activeDate = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).format('YYYY-MMM') : 0;\n\n            var result = {\n              'previousView': 'year',\n              'currentView': 'month',\n              'nextView': configuration.minView === 'month' ? 'setTime' : 'day',\n              'currentDate': startDate.valueOf(),\n              'title': startDate.format('YYYY'),\n              'leftDate': moment(startDate).subtract(1, 'year').valueOf(),\n              'rightDate': moment(startDate).add(1, 'year').valueOf(),\n              'dates': [],\n              'setUnits': ['year', 'month']\n            };\n\n            for(var i = 0; i < 12; i++) {\n              var monthMoment = moment(startDate).add(i, 'months');\n              var dateValue = {\n                'date': monthMoment.valueOf(),\n                'display': monthMoment.format('MMM'),\n                'active': monthMoment.format('YYYY-MMM') === activeDate,\n                'disabled': scope.minDate && monthMoment.add(1, 'month').isBefore(scope.minDate)\n              };\n\n              result.dates.push(dateValue);\n            }\n\n            return result;\n          },\n\n          day: function(unixDate) {\n\n            var selectedDate = moment(unixDate);\n            var startOfMonth = moment(selectedDate).startOf('month');\n            var endOfMonth = moment(selectedDate).endOf('month');\n\n            var startDate = moment(startOfMonth).subtract(Math.abs(startOfMonth.weekday() - configuration.weekStart), 'days');\n\n            var activeDate = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).format('YYYY-MMM-DD') : '';\n\n            var result = {\n              'previousView': 'month',\n              'currentView': 'day',\n              'nextView': configuration.minView === 'day' ? 'setTime' : 'hour',\n              'currentDate': selectedDate.valueOf(),\n              'title': selectedDate.format(`MMM${showView('year') ? ' YYYY' : ''}`),\n              'leftDate': moment(startOfMonth).subtract(1, 'months').valueOf(),\n              'rightDate': moment(startOfMonth).add(1, 'months').valueOf(),\n              'dayNames': [],\n              'weeks': [],\n              'setUnits': ['year', 'month', 'date']\n            };\n\n\n            for(var dayNumber = configuration.weekStart; dayNumber < configuration.weekStart + 7; dayNumber++) {\n              result.dayNames.push(moment().weekday(dayNumber).format('dd'));\n            }\n\n            for(var i = 0; i < 6; i++) {\n              var week = { dates: [] };\n              for(var j = 0; j < 7; j++) {\n                var monthMoment = moment(startDate).add((i * 7) + j, 'days');\n                var dateValue = {\n                  'date': monthMoment.valueOf(),\n                  'display': monthMoment.format('D'),\n                  'active': monthMoment.format('YYYY-MMM-DD') === activeDate,\n                  'past': monthMoment.isBefore(startOfMonth),\n                  'future': monthMoment.isAfter(endOfMonth),\n                  'disabled': scope.minDate && monthMoment.add(1, 'days').isBefore(scope.minDate)\n                };\n                week.dates.push(dateValue);\n              }\n              result.weeks.push(week);\n            }\n\n            return result;\n          },\n\n          hour: function(unixDate) {\n            var selectedDate = moment(unixDate).hour(0).minute(0).second(0);\n\n            var activeFormat = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).format('YYYY-MM-DD H') : '';\n\n            var result = {\n              'previousView': 'day',\n              'currentView': 'hour',\n              'nextView': configuration.minView === 'hour' ? 'setTime' : 'minute',\n              'currentDate': selectedDate.valueOf(),\n              'title': showView('day') ? selectedDate.format(`${showView('month') ? 'MMM ' : ''}DD${showView('year') ? ' YYYY' : ''}`) : 'Hour',\n              'leftDate': moment(selectedDate).subtract(1, 'days').valueOf(),\n              'rightDate': moment(selectedDate).add(1, 'days').valueOf(),\n              'dates': [],\n              'setUnits': ['year', 'month', 'date', 'hour']\n            };\n\n            for(var i = 0; i < 24; i++) {\n              var hourMoment = moment(selectedDate).add(i, 'hours');\n              var dateValue = {\n                'date': hourMoment.valueOf(),\n                'display': hourMoment.format('h a'),\n                'active': hourMoment.format('YYYY-MM-DD H') === activeFormat,\n                'disabled': scope.minDate && hourMoment.add(1, 'hours').isBefore(scope.minDate)\n              };\n\n              result.dates.push(dateValue);\n            }\n\n            return result;\n          },\n\n          minute: function(unixDate) {\n            var selectedDate = moment(unixDate).minute(0).second(0);\n\n            var activeFormat = scope.ngModel ? moment(scope.modelParser(scope.ngModel)).format('YYYY-MM-DD H:mm') : '';\n\n            var result = {\n              'previousView': 'hour',\n              'currentView': 'minute',\n              'nextView': 'setTime',\n              'currentDate': selectedDate.valueOf(),\n              'title': selectedDate.format(`${showView('month') ? 'MMM ' : ''}${showView('day') ? 'DD ' : ''}${showView('year') ? ' YYYY ' : ''}h:mm a`),\n              'leftDate': moment(selectedDate).subtract(1, 'hours').valueOf(),\n              'rightDate': moment(selectedDate).add(1, 'hours').valueOf(),\n              'dates': [],\n              'setUnits': ['year', 'month', 'date', 'hour', 'minute']\n            };\n\n            var limit = 60 / configuration.minuteStep;\n\n            for(var i = 0; i < limit; i++) {\n              var hourMoment = moment(selectedDate).add(i * configuration.minuteStep, 'minute');\n              var dateValue = {\n                'date': hourMoment.valueOf(),\n                'display': hourMoment.format('h:mm'),\n                'active': hourMoment.format('YYYY-MM-DD H:mm') === activeFormat,\n                'disabled': scope.minDate && hourMoment.subtract(1, 'minutes').isBefore(scope.minDate)\n              };\n\n              result.dates.push(dateValue);\n            }\n\n            return result;\n          },\n\n          setTime: function(unixDate, keepDropdown) {\n            var tempDate = new Date(unixDate);\n            var newDate = new Date(tempDate.getTime()/* + (tempDate.getTimezoneOffset() * 60000)*/);\n            if(configuration.dropdownSelector && !keepDropdown) {\n              jQuery(configuration.dropdownSelector).dropdown('toggle');\n            }\n            if(angular.isFunction(scope.onSetTime)) {\n              scope.onSetTime(newDate, scope.ngModel);\n            }\n            ctrl.$setViewValue(scope.modelFormatter(newDate));\n            //scope.ngModel = newDate;\n            return dataFactory[scope.data.currentView](unixDate);\n          }\n        };\n\n        var getUTCTime = function() {\n          console.log('getUTCTime:', scope.ngModel);\n          var tempDate = (scope.ngModel ? moment(scope.modelParser(scope.ngModel)).toDate() : new Date());\n          return tempDate.getTime()/* - (tempDate.getTimezoneOffset() * 60000)*/;\n        };\n\n        scope.changeView = function(viewName, unixDate, event, invalid, setTime) {\n          //unixDate = unixDate && _.isDate(unixDate) ? unixDate : scope.modelParser(unixDate).toDate();\n          if(event) {\n            event.stopPropagation();\n            event.preventDefault();\n          }\n\n          if(invalid) return;\n\n          if(viewName && (unixDate > -Infinity) && dataFactory[viewName]) {\n            if(setTime && viewName !== 'setTime') {\n              var newDate = moment(unixDate),\n                  curDate = scope.ngModel ? moment(scope.modelParser(scope.ngModel)) : moment().startOf('hour');\n\n              _.each(scope.data.setUnits, function(unit) {\n                var setVal = newDate[unit](),\n                    setDate = curDate[unit](setVal).valueOf();\n\n                //console.log('setVal, setDate:', unit, setVal, setDate);\n                dataFactory.setTime(setDate, true);\n              });\n            }\n            scope.data = dataFactory[viewName](unixDate);\n          }\n        };\n\n        scope.changeView(configuration.startView, getUTCTime());\n\n        scope.$watch('ngModel', function(cur, prev) {\n          if(cur !== prev) {\n            scope.changeView(scope.data.currentView, getUTCTime());\n          }\n        });\n\n        function showView(view) {\n          return validViews.indexOf(configuration.maxView) >= validViews.indexOf(view);\n        }\n      }\n    };\n  }\n})();"]}